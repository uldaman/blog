author: Martin
date: 2015-03-12 14:20
title: 注释模板

**函数注释:**





    <span style="color: #008000;">/*</span><span style="color: #008000;">***********************************************************************
    ◇  名称:      $SymbolName$
    ◇  参数:      $MethodArg$
    ◇  返回值:    $SymbolType$
    ◇  功能:      $end$
    ◇  说明:      $selected$
    ***********************************************************************</span><span style="color: #008000;">*/</span>







简单版:





    <span style="color: #008000;">//</span><span style="color: #008000;"> 参数: $MethodArg$
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 说明: $end$</span>







设置方法:

"VAssistX" –> "Visual VAssistX Options" 然后选择 "Suggestions", 再点击 "Edit VA Snippets",

在打开的窗口中选择  "Refactoring"  –> "Document Method"

![](http://i58.tinypic.com/nn18p5.jpg)



* * *





**类注释:**





    <span style="color: #008000;">/*</span><span style="color: #008000;">-----------------------------------------------------------------------
    * 类名: $classname$
    * 说明: $end$
    -----------------------------------------------------------------------</span><span style="color: #008000;">*/</span>







**头文件注释:**





    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;"> 文件名:   $FILE_BASE$.$FILE_EXT$
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 说明:     $end$
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建时间: $DATE$ $HOUR_02$:$MINUTE$
    </span><span style="color: #008000;">//</span>
    <span style="color: #008000;">//</span><span style="color: #008000;"> 更新日志: </span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>







设置方法:

"VAssistX" –> "Visual VAssistX Options" 然后选择 "Suggestions", 再点击 "Edit VA Snippets",

在打开的窗口中选择  "With Title Only" , 然后选择 "Class Comment" 和 "Header Comment", 并修改.

![](http://i57.tinypic.com/zn0d1h.jpg)



* * *





**头文件 类内部注释:
**





    <span style="color: #008000;">//</span><span style="color: #008000;">-----------------------------------------------------------
    </span><span style="color: #008000;">//</span><span style="color: #008000;">    $end$
    </span><span style="color: #008000;">//</span><span style="color: #008000;">-----------------------------------------------------------</span>







**实现文件 外部注释:
**





    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;">    $end$</span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>







设置方法:

"VAssistX" –> "Visual VAssistX Options" 然后选择 "Suggestions", 再点击 "Edit VA Snippets", 在打开的窗口中选择  "All by Title" , 然后添加.



* * *



样例





    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;"> 文件名:   FindWay.h
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 说明:     实现寻路功能的策略模式
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 创建时间: 2015/03/12 21:27
    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 更新日志:
    </span><span style="color: #008000;">//</span>
    <span style="color: #008000;">//</span><span style="color: #008000;"> 2015/03/12 21:31 -- 添加 Straight 策略, 实现直线走路, 目标和角色之间不
    </span><span style="color: #008000;">//</span><span style="color: #008000;">                     能有障碍.</span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #0000ff;">#pragma</span> once<span style="color: #000000;">
    #include </span><Windows.h><span style="color: #000000;">
    #include </span><memory>

    <span style="color: #008000;">/*</span><span style="color: #008000;">-----------------------------------------------------------------------
     * 类名: CFindWay
     * 说明: 寻路策略模式中的抽象类
    -----------------------------------------------------------------------</span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">class</span><span style="color: #000000;"> CFindWay {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        CFindWay();
        </span><span style="color: #0000ff;">virtual</span> ~<span style="color: #000000;">CFindWay();

        </span><span style="color: #0000ff;">double</span><span style="color: #000000;"> m_dPointX;
        </span><span style="color: #0000ff;">double</span><span style="color: #000000;"> m_dPointY;
        </span><span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">void</span> GotoPoint() = <span style="color: #800080;">0</span><span style="color: #000000;">;
    };

    </span><span style="color: #008000;">/*</span><span style="color: #008000;">-----------------------------------------------------------------------
     * 类名: CExplicit
     * 说明: 具体寻路策略, 寻路模式
     -----------------------------------------------------------------------</span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">class</span><span style="color: #000000;"> CExplicit :
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> CFindWay {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        CExplicit();
        </span>~<span style="color: #000000;">CExplicit();

        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> GotoPoint();
    };

    </span><span style="color: #008000;">/*</span><span style="color: #008000;">-----------------------------------------------------------------------
     * 类名: Straight
     * 说明: 具体寻路策略, 直线走路模式
    -----------------------------------------------------------------------</span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">class</span><span style="color: #000000;"> Straight :
        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> CFindWay {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        Straight();
        </span>~<span style="color: #000000;">Straight();

        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> GotoPoint();
    };

    </span><span style="color: #008000;">/*</span><span style="color: #008000;">-----------------------------------------------------------------------
     * 类名: CFwContext
     * 说明: 策略模式的环境类, 维护一个 CFindWay 的引用.
    -----------------------------------------------------------------------</span><span style="color: #008000;">*/</span>
    <span style="color: #0000ff;">class</span><span style="color: #000000;"> CFwContext {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;">:
        CFwContext(std::shared_ptr</span><CFindWay><span style="color: #000000;"> strategy);
        </span>~<span style="color: #000000;">CFwContext();

        </span><span style="color: #0000ff;">double</span><span style="color: #000000;"> m_dPointX;
        </span><span style="color: #0000ff;">double</span><span style="color: #000000;"> m_dPointY;

        </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> GotoPoint();

    </span><span style="color: #0000ff;">private</span><span style="color: #000000;">:
        </span><span style="color: #008000;">//</span><span style="color: #008000;">-----------------------------------------------------------
        </span><span style="color: #008000;">//</span><span style="color: #008000;">    通过 shared_ptr(智能指针) 维护一个 CFindWay 的引用.
        </span><span style="color: #008000;">//</span><span style="color: #008000;">-----------------------------------------------------------</span>
        std::shared_ptr<CFindWay><span style="color: #000000;"> m_strategy;
    };</span>








* * *








    #include <span style="color: #800000;">"</span><span style="color: #800000;">FindWay.h</span><span style="color: #800000;">"</span>

    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;">    CFindWay 基类</span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #000000;">CFindWay::CFindWay() {
    }

    CFindWay::</span>~<span style="color: #000000;">CFindWay() {
    }

    </span><span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;">    CExplicit 策略类</span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #000000;">
    CExplicit::CExplicit() {
    }


    CExplicit::</span>~<span style="color: #000000;">CExplicit() {
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 说明: 寻路模式 寻路到指定的明文坐标点</span>
    <span style="color: #0000ff;">void</span><span style="color: #000000;"> CExplicit::GotoPoint() {

    }

    </span><span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;">    Straight 策略类</span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #000000;">
    Straight::Straight() {
    }

    Straight::</span>~<span style="color: #000000;">Straight() {
    }


    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 说明: 直线模式 直线走到指定的明文坐标点, 不能有障碍.</span>
    <span style="color: #0000ff;">void</span><span style="color: #000000;"> Straight::GotoPoint() {

    }


    </span><span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #008000;">//</span><span style="color: #008000;">    CFwContext 环境类</span>
    <span style="color: #808080;">////////////////////////////////////////////////////////////////////////</span><span style="color: #008000;">/</span>
    <span style="color: #000000;">
    CFwContext::CFwContext(std::shared_ptr</span><CFindWay><span style="color: #000000;"> strategy) {
        m_strategy </span>=<span style="color: #000000;"> strategy;
    }

    CFwContext::</span>~<span style="color: #000000;">CFwContext() {
    }

    </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> CFwContext::GotoPoint() {
        m_strategy</span>->m_dPointX =<span style="color: #000000;"> m_dPointX;
        m_strategy</span>->m_dPointY =<span style="color: #000000;"> m_dPointY;
        m_strategy</span>-><span style="color: #000000;">GotoPoint();
    }</span>



  /
