author: Martin
date: 2015-06-22 19:35
title: 二、個人性格

<blockquote>人们容易混淆行动与进展, 混淆忙绿与多产, 有效编程中最重要的工作是思考, 而人思考时通常不会看上去很忙.</blockquote>


如同本章開篇所說, 如果想尋求具體的編程技巧, 這章就可以跳過了, 但如果你想獲得更進一步的提高, 這章還是有必要的.

**一些好的性格**

**謙虛**
精通編程的人是那些了解自己頭腦有多大局限性的人, 都很謙虛, 那些編程糟糕的人, 總是拒絕接受自己腦瓜不能勝任工作的事實(也就是自大), 自負使得它們無法成為優秀的程序員;
**承認智力有限并通過學習來彌補, 你會成為更好的程序員, 你越謙虛, 進步就越快.**

**求知欲**
在成長為高手的過程中, 對技術事物的求知欲具有壓倒一切的重要性(意思是要對陌生、不熟悉的事物抱有求知態度), 作者在下面給出了一些培養求知欲和把學習當做第一要務的方法.
*. 在軟件開發過程中, 會學習到新的知識、培養自我意識, 如果分配給你的工作淨是些不能提高自身技能的短期工作, 理應表示不滿(**總結就是在工作中學習, 如果學不到了, 就跳槽吧...**).
*. 在學習編程過過程中, 應當嘗試編寫小程序來實驗新學到的知識.
*. 解決問題是軟件創作過程中的核心行為, 遇到問題, 應該嘗試自行找出解決問題的巧妙方法.
*. 在行動之前做分析和計劃.
*. 學習成功項目的開發經驗, 學習編程的一個特別好的途徑是研究高手的程序(這個很對, 站在巨人的肩膀上).
*. 閱讀文檔, 好吧, 這是廢話(意思大概是說, 遇到不會的 API, 應該去查閱 MSDN -- 針對 C++).
*. 閱讀其他書本期刊(現在就在讀...).
*. 同專業人士交往(可望而不可得, 看運氣能不能遇到, **多參加交流會, 加入某個社交群**等等).

番外: 作者還提到, 程序員應該是為人寫代碼, 高手所寫的代碼, 都像水晶那樣晶瑩剔透, 還配有文檔(這個確實有發現, 我在 CodeProject 下載的源碼, 都具有這個特點).

**誠實**
編程生涯成熟的部分標誌就是發展出一種不屈不撓的誠實感(好吧, 其實我不知道這是什麼意思, 但是下面的解釋還是很清楚的), 通過表現為以下幾個方面:
*. 不是高手時不假裝是高手
*. 樂於承認錯誤
*. 力圖其解編譯器的警告, 而非棄之不理(**這個..我還經常看到警告當沒看到的..以後要注意了**)
*. 透徹理解自己的程序, 而不要只是編譯看看能否運行(**我以往遇到一些'奇怪'的代碼, 就會要編譯器跑一下, 就能不能實現功能, 可以實現就不管它了, 這個要改, 拷貝粘貼可不是好習慣**)
*. 提供實際的狀況報告
*. 提供現實的項目方案, 在上司面前堅持自己的意見(這個其實很重要, 以前在上海一家公司上班, 需要做項目預估, 不過上司對我的預估不滿意, 認為花費太高, 時間太長, 結果硬頭皮改預估..結果自然是慘不忍睹..)

番外: 作者提倡, 假裝自己啥都不懂, 然後聽聽別人怎麼說, 從他們那裡學到新內容, 並能了解他們是否真的清楚所討論的東西. -- 這個我經常做..我是不是好壞~

**交流與合作
**代碼便於看懂是對團隊成員的要求之一.

**創造力和紀律**
這段其實不是很明白, 我理解的意思, 大概就是在一些約束(紀律)的前提下進行創造, 不要把創造力花費在無用的地方.

**懶惰**
好吧, 就段就是教我們怎麼'偷懶'的.
*. 養成迅速做完不喜歡的任務以擺脫它的習慣(**切忌拖延不喜歡的任務, 任務不會因為你的拖延而自動完成**).
*. 如果可能的話, 編寫某個工具來完成不喜歡的任務..
這兩點, 其實我都深有體會.

番外: 作者認為, 不會偷懶的程序員不是好程序員, 因為他沒有用最有價值的工具 -- 頭腦;
“硬干”或者“苦干”并没有带着光环, “硬干”是种徒劳的、大可不必的努力, 只会说明你急切但并不是在完成工作;
而人们也常常容易混淆行动与进展、混淆忙碌与多产, 有效编程中最重要的是思考, 而人思考时通常不会看上去很忙.



* * *



**一些錯誤的性格**
這個很意思, 一些本來在我看來是不錯的性格, 在作者這裡確是一種有問題的性格.

**堅持**
根據環境的不同, 堅持可能是財富, 也可能是負擔, 多數時候軟件開發過程中的堅持其實就是沒有好處的'固執'. 例如:
在設計新代碼上卡殼時, 不妨另辟蹊徑, 嘗試重新設計類, 或者繞過去, 以後再回來看;
遇到 BUG 時, 如果一段時間內沒有進展, 比如15分鐘、半小時等, 就該放棄, 想個其它辦法繞開, 或者從頭編寫有問題的代碼, 再或者先休息下, 理清思緒後再來做.

**經驗**
作者認為, 在軟件行業, 基礎知識變化很快, 變化迅速, 依靠舊的經驗往往還會得到錯誤結論, 一個剛畢業的程序員可能掌握的可用技術要比10年開發經驗的程序員還要多, 因為變化太快, 舊的東西用不上...
還有就是, 如果你工作10年, 你是得到一10年經驗還是1年經驗的10次重複? 這是必須檢討的.

**編程狂人**
那種為了熱愛編程, 就常常花上一天16小時去編程, 甚至睡覺時還在想著編程的人, 作者也並不提倡, 因為過度的勞累, 會讓你寫出質量很差的代碼, 而之後, 你要花過多的時間去糾正..
**好吧, 這個時候, 我還在看書就是不對的, 以後要改..**



* * *



**習慣的重要性**
程序員做的大部分事情都是無意識完成的, 例如, 你可能曾經想過該如何放置花括號的位置, 但現在已經不需要去想了, 而是以習慣的方式來做.
行為養成習慣, 年復日久這些好/壞的習慣就決定了程序員的優/劣.
總之, 就是要嘗試培養好習慣, 例如, 寫完 new, 就要想想有沒有 delete 等等.



* * *



**小結**

![](http://i57.tinypic.com/2my8f90.jpg)
itt
