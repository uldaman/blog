author: Martin
date: 2015-06-25 17:20
title: 四、自說明代碼--註釋

<blockquote>關於註釋, 我想我已經養成了習慣, 下面的摘自原文, 供參考
>
> </blockquote>

**代碼中常見的註釋**
*. 重複代碼: 重複性註釋只是用不同的語言把代碼的工作再描述一次. 這只會增加閱讀量.
*. 解釋代碼: 通常用於解釋複雜的代碼碼. 但通常是因為代碼含糊不清, 才體現出這類註釋的價值, 如果代碼過于複雜而需要解釋, 最好的做法是改進代碼, 而不是添加註釋.
*. 代碼標記: 標記性註釋並非有意留在代碼中, 它用來標記某个代码暂时还存在的问题, 等待完善.
*. 概述代码: 将若干代码行的意思以一两句话表达出来.
*. 代码意图说明: 目的性注释用来指明一段代码的意图, 它指出要解决的问题. 概述代码和代码意图说明并没有明顯的界限.
*. 傳達代碼無法表述的信息: 某些信息不能通過代碼表達, 但又要包含在源代碼中, 這種註釋包括版權聲明等.

對於完工的代碼, 只允許有三種類型註釋: 傳達代碼無法表述的信息、代码意图说明和概述代码.

* * *



**高效註釋**

**採用不會打斷或抑制修改的註釋風格**
這是書中的原話, 它的意思就是不要把註釋設計的很"花哨", 例如下面這樣:
![](http://i61.tinypic.com/5bntl0.jpg)
這兩份註釋看上去也許很美觀, 但是修改這個註釋帶來的工作量也會呵呵(你要"小心翼翼"地去控制 '.' 和 '*')…
註釋應該準確甚於好看, 下面這樣就會好很多:
![](http://i59.tinypic.com/10qe7er.jpg)

**用偽代碼編程法減少註釋時間**
這是個有用的技巧, 在寫代碼前, 用註釋先勾勒出代碼, 然後按註釋來完成代碼.

**將註釋集成到你的開發風格中**
這條和上面一條是相輔相成的, 這條的相反做法是代碼寫完後再補註釋.

* * *



**註釋技術**

**如何使用行尾註釋**
*. 避免用註釋"重複"代碼
*. 不要對多行代碼做行尾註釋(除控制語句塊結尾外)
*. 可用於數據聲明, 如 Int nNumOfStudents; // 學生的數量
*. 避免用行尾註釋存放維護日誌, 維護日誌應該由版本控制程序來處理最好
*. 可用於標記語句塊尾, 如 while、for 語句等(下面的註釋代碼塊將會說明這點)

**註釋代碼塊(也就是上面一項第二條--多行代碼)**
*. 註釋應表達代碼的意圖, 而不是對代碼的重複, 例如有五行代碼用來查找字符'$', 那麼我們的註釋應該標明這五行代碼的意圖, 也就是為什麼要找個這個字符'$'(有個很好的技巧來完成這點, 就是如果要給個代碼塊取個函數名, 你會取什麼? 這個函數名再修改一下就是最好的註釋).
*. 註釋應該說明的是"為何做"而不是"怎麼做".
*. 如果代碼比較複雜或者代碼採用了非常規做法需要提醒閱讀者注意, 則可以在註釋中說明複雜的地方.

**註釋數據聲明**
*. 註釋數據單位
*. 註釋數值的允許範圍
*. 註釋數據的輸入限制
*. 註釋全局數據

**註釋控制結構**
應該在控制語句前加上控制語句的目的, 結尾加上執行結果的總結.

**註釋子程序**
簡單的說明子程序的意圖, 註釋參數, 註釋返回值.

**註釋類**
*. 說明類的設計方法
*. 說明局限性、用法等
*. 不要說明實現細節
?
